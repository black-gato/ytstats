// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: subscribers.sql

package db

import (
	"context"
)

const addChannel = `-- name: AddChannel :one
INSERT INTO channels (
    id,
    channel_name,
    channel_url,
    is_subbed

    ) VALUES (
        ?, ?, ?, ?
) RETURNING id, channel_name, channel_url, is_subbed
`

type AddChannelParams struct {
	ID          string
	ChannelName string
	ChannelUrl  string
	IsSubbed    bool
}

func (q *Queries) AddChannel(ctx context.Context, arg AddChannelParams) (Channel, error) {
	row := q.db.QueryRowContext(ctx, addChannel,
		arg.ID,
		arg.ChannelName,
		arg.ChannelUrl,
		arg.IsSubbed,
	)
	var i Channel
	err := row.Scan(
		&i.ID,
		&i.ChannelName,
		&i.ChannelUrl,
		&i.IsSubbed,
	)
	return i, err
}

const getMostWatchedChannels = `-- name: GetMostWatchedChannels :many
SELECT
  channels.channel_name,
  COUNT(*) AS watch_count,
  channels.is_subbed
FROM
  watch_history
INNER JOIN
  channels ON watch_history.channel_id = channels.id
WHERE
  (channels.channel_name = ?1 OR ?1 IS NULL)
  OR (channels.is_subbed = ?2 OR ?2 IS NULL)
GROUP BY
  channels.id
HAVING
  COUNT(*) >= 1
ORDER BY
  watch_count DESC
LIMIT
  ?3
`

type GetMostWatchedChannelsParams struct {
	ChannelName string
	IsSubbed    bool
	Limit       int64
}

type GetMostWatchedChannelsRow struct {
	ChannelName string
	WatchCount  int64
	IsSubbed    bool
}

func (q *Queries) GetMostWatchedChannels(ctx context.Context, arg GetMostWatchedChannelsParams) ([]GetMostWatchedChannelsRow, error) {
	rows, err := q.db.QueryContext(ctx, getMostWatchedChannels, arg.ChannelName, arg.IsSubbed, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMostWatchedChannelsRow
	for rows.Next() {
		var i GetMostWatchedChannelsRow
		if err := rows.Scan(&i.ChannelName, &i.WatchCount, &i.IsSubbed); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
